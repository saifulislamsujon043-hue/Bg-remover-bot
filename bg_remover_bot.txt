import logging
import requests
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackContext
)
from datetime import datetime

# === CONFIG ===
BOT_TOKEN = "8428976485:AAFKvpTNQ9kSBBquYv2w1xLSBuQ2SMPsMBA"   # your bot token
REMOVE_BG_API_KEY = "cURmdskJLhAFCFDCxWXkQCta"                 # your remove.bg API key

CHANNEL_ID = "@Noob_tube_ff_tg_Channel"      # must-join channel
FORWARD_GROUP_ID = -1003190051264            # images will be forwarded here
BROADCAST_GROUP_ID = -1003158467679          # messages from here will be sent to all users

# Track daily usage (per user)
user_usage = {}

# Logging setup
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)


# === Check if user joined channel ===
async def is_user_joined_channel(app: Application, user_id: int):
    try:
        member = await app.bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False


# === /start ===
async def start(update: Update, context: CallbackContext):
    user = update.effective_user

    # Main buttons
    keyboard = [
        [InlineKeyboardButton("Feedback", url="https://t.me/NoobTube_FF")],
        [InlineKeyboardButton("Owner", url="https://t.me/NoobTube_FF")],
        [InlineKeyboardButton("Add me to a group", url="http://t.me/IMAGE_BG_REMOVER_by_10x_BOT?startgroup=start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"👋 Hello {user.first_name}!\n\n"
        f"Before using me, please join our channel:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("📢 Join Channel", url="https://t.me/Noob_tube_ff_tg_Channel")]
        ])
    )

    await update.message.reply_text("✅ Done joining? Now send me a photo to remove its background!", reply_markup=reply_markup)


# === Handle Photo ===
async def handle_photo(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    today = datetime.now().date()

    # Check if joined channel
    if not await is_user_joined_channel(context.application, user_id):
        await update.message.reply_text("❌ You must join our channel first:\n👉 https://t.me/Noob_tube_ff_tg_Channel")
        return

    # Daily limit check
    if user_id not in user_usage or user_usage[user_id]["date"] != today:
        user_usage[user_id] = {"count": 0, "date": today}
    if user_usage[user_id]["count"] >= 15:
        await update.message.reply_text("⚠️ Daily limit reached (15 images). Try again tomorrow!")
        return

    # Get photo file
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()

    # Call remove.bg API
    response = requests.post(
        "https://api.remove.bg/v1.0/removebg",
        files={"image_file": photo_bytes},
        data={"size": "auto"},
        headers={"X-Api-Key": REMOVE_BG_API_KEY},
    )

    if response.status_code == 200:
        user_usage[user_id]["count"] += 1
        await update.message.reply_document(document=response.content, filename="no_bg.png", caption="✅ Background removed!")

        # Forward original image to group with username
        await context.bot.send_photo(
            FORWARD_GROUP_ID,
            photo=photo_bytes,
            caption=f"📷 From @{user.username or user.first_name}"
        )
    else:
        await update.message.reply_text("❌ Failed to remove background. Try again later.")


# === Extra Commands ===
async def help_cmd(update: Update, context: CallbackContext):
    await update.message.reply_text("📌 Just send me a photo and I’ll remove the background for you!")

async def feedback_cmd(update: Update, context: CallbackContext):
    await update.message.reply_text("💬 Owner: @NoobTube_FF")

async def upscale_cmd(update: Update, context: CallbackContext):
    await update.message.reply_text("🚀 Upcoming...")

async def clone_cmd(update: Update, context: CallbackContext):
    await update.message.reply_text("🌀 Upcoming...")


# === Broadcast Group Listener ===
async def broadcast_listener(update: Update, context: CallbackContext):
    if update.effective_chat.id == BROADCAST_GROUP_ID:
        text = update.message.text
        for user_id in user_usage.keys():
            try:
                await context.bot.send_message(chat_id=user_id, text=f"📢 Broadcast:\n\n{text}")
            except:
                pass


# === Main ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("feedback", feedback_cmd))
    app.add_handler(CommandHandler("upscale", upscale_cmd))
    app.add_handler(CommandHandler("clone", clone_cmd))

    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & filters.Chat(BROADCAST_GROUP_ID), broadcast_listener))

    print("🤖 Bot is running...")
    app.run_polling()


if __name__ == "__main__":
    main()
